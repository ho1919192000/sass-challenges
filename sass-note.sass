/*Sass: Store Data with Sass Variables*/
/*In Sass, variables start with a $ followed by the variable name.*/
  $text-color: red;
  .header{
    text-align: $text-color;
  }
  .blog-post, h2 {
    color:$text-color;
  }

/*Sass: Nest CSS with Sass*/
/*Sass allows nesting of CSS rules, which is a useful way of organizing a style sheet.*/
  .blog-post {
    h1 {
      text-align: center;
      color: blue;
    }
    p {
      font-size: 20px;
    }
  }
/*Sass: Create Reusable CSS with Mixins*/
/*In Sass, a mixin is a group of CSS declarations that can be reused throughout the style sheet.*/
/* A mixin is called with the @include directive:*/
  @mixin border-radius($radius){
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
  } 
  
  #awesome {
    width: 150px;
    height: 150px;
    background-color: green;
    @include border-radius(15px);
  }
 
/*Sass: Use @if and @else to Add Logic To Your Styles*/
/*The @if directive in Sass is useful to test for a specific case - it works just like the if statement in JavaScript.*/
/*And just like in JavaScript, @else if and @else test for more conditions*/
  @mixin border-stroke($val) {
    @if $val == light {
      border: 1px solid black;
    }
    @else if $val == medium {
      border: 3px solid black;
    }
    @else if $val == heavy {
      border: 6px solid black;
    }
    @else {
      border: none;
    }
  }
  
  #box {
    width: 150px;
    height: 150px;
    background-color: red;
    @include border-stroke(heavy);
  } 

/*Sass: Use @for to Create a Sass Loop*/
/*The @for directive adds styles in a loop, very similar to a for loop in JavaScript.*/
/*The #{$i} part is the syntax to combine a variable (i) with text to make a string. */
  @for $j from 1 to 6 {
    .text-#{$j} { font-size: 10px * $j; }
  }
  @for $i from 1 through 12 {
    .col-#{$i} { width: 100%/12 * $i; }
  }
